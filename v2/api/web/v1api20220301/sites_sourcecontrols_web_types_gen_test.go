// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220301

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/web/v1api20220301/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_GitHubActionCodeConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionCodeConfiguration to GitHubActionCodeConfiguration via AssignProperties_To_GitHubActionCodeConfiguration & AssignProperties_From_GitHubActionCodeConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionCodeConfiguration, GitHubActionCodeConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionCodeConfiguration tests if a specific instance of GitHubActionCodeConfiguration can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionCodeConfiguration(subject GitHubActionCodeConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionCodeConfiguration
	err := copied.AssignProperties_To_GitHubActionCodeConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionCodeConfiguration
	err = actual.AssignProperties_From_GitHubActionCodeConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionCodeConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionCodeConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionCodeConfiguration, GitHubActionCodeConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionCodeConfiguration runs a test to see if a specific instance of GitHubActionCodeConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionCodeConfiguration(subject GitHubActionCodeConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionCodeConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionCodeConfiguration instances for property testing - lazily instantiated by
// GitHubActionCodeConfigurationGenerator()
var gitHubActionCodeConfigurationGenerator gopter.Gen

// GitHubActionCodeConfigurationGenerator returns a generator of GitHubActionCodeConfiguration instances for property testing.
func GitHubActionCodeConfigurationGenerator() gopter.Gen {
	if gitHubActionCodeConfigurationGenerator != nil {
		return gitHubActionCodeConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration(generators)
	gitHubActionCodeConfigurationGenerator = gen.Struct(reflect.TypeOf(GitHubActionCodeConfiguration{}), generators)

	return gitHubActionCodeConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration(gens map[string]gopter.Gen) {
	gens["RuntimeStack"] = gen.PtrOf(gen.AlphaString())
	gens["RuntimeVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitHubActionCodeConfiguration_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionCodeConfiguration_STATUS to GitHubActionCodeConfiguration_STATUS via AssignProperties_To_GitHubActionCodeConfiguration_STATUS & AssignProperties_From_GitHubActionCodeConfiguration_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionCodeConfiguration_STATUS, GitHubActionCodeConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionCodeConfiguration_STATUS tests if a specific instance of GitHubActionCodeConfiguration_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionCodeConfiguration_STATUS(subject GitHubActionCodeConfiguration_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionCodeConfiguration_STATUS
	err := copied.AssignProperties_To_GitHubActionCodeConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionCodeConfiguration_STATUS
	err = actual.AssignProperties_From_GitHubActionCodeConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionCodeConfiguration_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionCodeConfiguration_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionCodeConfiguration_STATUS, GitHubActionCodeConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionCodeConfiguration_STATUS runs a test to see if a specific instance of GitHubActionCodeConfiguration_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionCodeConfiguration_STATUS(subject GitHubActionCodeConfiguration_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionCodeConfiguration_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionCodeConfiguration_STATUS instances for property testing - lazily instantiated by
// GitHubActionCodeConfiguration_STATUSGenerator()
var gitHubActionCodeConfiguration_STATUSGenerator gopter.Gen

// GitHubActionCodeConfiguration_STATUSGenerator returns a generator of GitHubActionCodeConfiguration_STATUS instances for property testing.
func GitHubActionCodeConfiguration_STATUSGenerator() gopter.Gen {
	if gitHubActionCodeConfiguration_STATUSGenerator != nil {
		return gitHubActionCodeConfiguration_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration_STATUS(generators)
	gitHubActionCodeConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(GitHubActionCodeConfiguration_STATUS{}), generators)

	return gitHubActionCodeConfiguration_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionCodeConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["RuntimeStack"] = gen.PtrOf(gen.AlphaString())
	gens["RuntimeVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitHubActionConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionConfiguration to GitHubActionConfiguration via AssignProperties_To_GitHubActionConfiguration & AssignProperties_From_GitHubActionConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionConfiguration, GitHubActionConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionConfiguration tests if a specific instance of GitHubActionConfiguration can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionConfiguration(subject GitHubActionConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionConfiguration
	err := copied.AssignProperties_To_GitHubActionConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionConfiguration
	err = actual.AssignProperties_From_GitHubActionConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionConfiguration, GitHubActionConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionConfiguration runs a test to see if a specific instance of GitHubActionConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionConfiguration(subject GitHubActionConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionConfiguration instances for property testing - lazily instantiated by
// GitHubActionConfigurationGenerator()
var gitHubActionConfigurationGenerator gopter.Gen

// GitHubActionConfigurationGenerator returns a generator of GitHubActionConfiguration instances for property testing.
// We first initialize gitHubActionConfigurationGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func GitHubActionConfigurationGenerator() gopter.Gen {
	if gitHubActionConfigurationGenerator != nil {
		return gitHubActionConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionConfiguration(generators)
	gitHubActionConfigurationGenerator = gen.Struct(reflect.TypeOf(GitHubActionConfiguration{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionConfiguration(generators)
	AddRelatedPropertyGeneratorsForGitHubActionConfiguration(generators)
	gitHubActionConfigurationGenerator = gen.Struct(reflect.TypeOf(GitHubActionConfiguration{}), generators)

	return gitHubActionConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionConfiguration(gens map[string]gopter.Gen) {
	gens["GenerateWorkflowFile"] = gen.PtrOf(gen.Bool())
	gens["IsLinux"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForGitHubActionConfiguration is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGitHubActionConfiguration(gens map[string]gopter.Gen) {
	gens["CodeConfiguration"] = gen.PtrOf(GitHubActionCodeConfigurationGenerator())
	gens["ContainerConfiguration"] = gen.PtrOf(GitHubActionContainerConfigurationGenerator())
}

func Test_GitHubActionConfiguration_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionConfiguration_STATUS to GitHubActionConfiguration_STATUS via AssignProperties_To_GitHubActionConfiguration_STATUS & AssignProperties_From_GitHubActionConfiguration_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionConfiguration_STATUS, GitHubActionConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionConfiguration_STATUS tests if a specific instance of GitHubActionConfiguration_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionConfiguration_STATUS(subject GitHubActionConfiguration_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionConfiguration_STATUS
	err := copied.AssignProperties_To_GitHubActionConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionConfiguration_STATUS
	err = actual.AssignProperties_From_GitHubActionConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionConfiguration_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionConfiguration_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionConfiguration_STATUS, GitHubActionConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionConfiguration_STATUS runs a test to see if a specific instance of GitHubActionConfiguration_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionConfiguration_STATUS(subject GitHubActionConfiguration_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionConfiguration_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionConfiguration_STATUS instances for property testing - lazily instantiated by
// GitHubActionConfiguration_STATUSGenerator()
var gitHubActionConfiguration_STATUSGenerator gopter.Gen

// GitHubActionConfiguration_STATUSGenerator returns a generator of GitHubActionConfiguration_STATUS instances for property testing.
// We first initialize gitHubActionConfiguration_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func GitHubActionConfiguration_STATUSGenerator() gopter.Gen {
	if gitHubActionConfiguration_STATUSGenerator != nil {
		return gitHubActionConfiguration_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionConfiguration_STATUS(generators)
	gitHubActionConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(GitHubActionConfiguration_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionConfiguration_STATUS(generators)
	AddRelatedPropertyGeneratorsForGitHubActionConfiguration_STATUS(generators)
	gitHubActionConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(GitHubActionConfiguration_STATUS{}), generators)

	return gitHubActionConfiguration_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionConfiguration_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["GenerateWorkflowFile"] = gen.PtrOf(gen.Bool())
	gens["IsLinux"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForGitHubActionConfiguration_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGitHubActionConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["CodeConfiguration"] = gen.PtrOf(GitHubActionCodeConfiguration_STATUSGenerator())
	gens["ContainerConfiguration"] = gen.PtrOf(GitHubActionContainerConfiguration_STATUSGenerator())
}

func Test_GitHubActionContainerConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionContainerConfiguration to GitHubActionContainerConfiguration via AssignProperties_To_GitHubActionContainerConfiguration & AssignProperties_From_GitHubActionContainerConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionContainerConfiguration, GitHubActionContainerConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionContainerConfiguration tests if a specific instance of GitHubActionContainerConfiguration can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionContainerConfiguration(subject GitHubActionContainerConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionContainerConfiguration
	err := copied.AssignProperties_To_GitHubActionContainerConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionContainerConfiguration
	err = actual.AssignProperties_From_GitHubActionContainerConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionContainerConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionContainerConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionContainerConfiguration, GitHubActionContainerConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionContainerConfiguration runs a test to see if a specific instance of GitHubActionContainerConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionContainerConfiguration(subject GitHubActionContainerConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionContainerConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionContainerConfiguration instances for property testing - lazily instantiated by
// GitHubActionContainerConfigurationGenerator()
var gitHubActionContainerConfigurationGenerator gopter.Gen

// GitHubActionContainerConfigurationGenerator returns a generator of GitHubActionContainerConfiguration instances for property testing.
func GitHubActionContainerConfigurationGenerator() gopter.Gen {
	if gitHubActionContainerConfigurationGenerator != nil {
		return gitHubActionContainerConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration(generators)
	gitHubActionContainerConfigurationGenerator = gen.Struct(reflect.TypeOf(GitHubActionContainerConfiguration{}), generators)

	return gitHubActionContainerConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration(gens map[string]gopter.Gen) {
	gens["ImageName"] = gen.PtrOf(gen.AlphaString())
	gens["ServerUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitHubActionContainerConfiguration_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from GitHubActionContainerConfiguration_STATUS to GitHubActionContainerConfiguration_STATUS via AssignProperties_To_GitHubActionContainerConfiguration_STATUS & AssignProperties_From_GitHubActionContainerConfiguration_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForGitHubActionContainerConfiguration_STATUS, GitHubActionContainerConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForGitHubActionContainerConfiguration_STATUS tests if a specific instance of GitHubActionContainerConfiguration_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForGitHubActionContainerConfiguration_STATUS(subject GitHubActionContainerConfiguration_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.GitHubActionContainerConfiguration_STATUS
	err := copied.AssignProperties_To_GitHubActionContainerConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual GitHubActionContainerConfiguration_STATUS
	err = actual.AssignProperties_From_GitHubActionContainerConfiguration_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_GitHubActionContainerConfiguration_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitHubActionContainerConfiguration_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitHubActionContainerConfiguration_STATUS, GitHubActionContainerConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitHubActionContainerConfiguration_STATUS runs a test to see if a specific instance of GitHubActionContainerConfiguration_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGitHubActionContainerConfiguration_STATUS(subject GitHubActionContainerConfiguration_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitHubActionContainerConfiguration_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitHubActionContainerConfiguration_STATUS instances for property testing - lazily instantiated by
// GitHubActionContainerConfiguration_STATUSGenerator()
var gitHubActionContainerConfiguration_STATUSGenerator gopter.Gen

// GitHubActionContainerConfiguration_STATUSGenerator returns a generator of GitHubActionContainerConfiguration_STATUS instances for property testing.
func GitHubActionContainerConfiguration_STATUSGenerator() gopter.Gen {
	if gitHubActionContainerConfiguration_STATUSGenerator != nil {
		return gitHubActionContainerConfiguration_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration_STATUS(generators)
	gitHubActionContainerConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(GitHubActionContainerConfiguration_STATUS{}), generators)

	return gitHubActionContainerConfiguration_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitHubActionContainerConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["ImageName"] = gen.PtrOf(gen.AlphaString())
	gens["ServerUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_SitesSourcecontrolsWeb_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SitesSourcecontrolsWeb to hub returns original",
		prop.ForAll(RunResourceConversionTestForSitesSourcecontrolsWeb, SitesSourcecontrolsWebGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForSitesSourcecontrolsWeb tests if a specific instance of SitesSourcecontrolsWeb round trips to the hub storage version and back losslessly
func RunResourceConversionTestForSitesSourcecontrolsWeb(subject SitesSourcecontrolsWeb) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.SitesSourcecontrolsWeb
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual SitesSourcecontrolsWeb
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SitesSourcecontrolsWeb_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SitesSourcecontrolsWeb to SitesSourcecontrolsWeb via AssignProperties_To_SitesSourcecontrolsWeb & AssignProperties_From_SitesSourcecontrolsWeb returns original",
		prop.ForAll(RunPropertyAssignmentTestForSitesSourcecontrolsWeb, SitesSourcecontrolsWebGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSitesSourcecontrolsWeb tests if a specific instance of SitesSourcecontrolsWeb can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSitesSourcecontrolsWeb(subject SitesSourcecontrolsWeb) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SitesSourcecontrolsWeb
	err := copied.AssignProperties_To_SitesSourcecontrolsWeb(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SitesSourcecontrolsWeb
	err = actual.AssignProperties_From_SitesSourcecontrolsWeb(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SitesSourcecontrolsWeb_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SitesSourcecontrolsWeb via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSitesSourcecontrolsWeb, SitesSourcecontrolsWebGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSitesSourcecontrolsWeb runs a test to see if a specific instance of SitesSourcecontrolsWeb round trips to JSON and back losslessly
func RunJSONSerializationTestForSitesSourcecontrolsWeb(subject SitesSourcecontrolsWeb) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SitesSourcecontrolsWeb
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SitesSourcecontrolsWeb instances for property testing - lazily instantiated by
// SitesSourcecontrolsWebGenerator()
var sitesSourcecontrolsWebGenerator gopter.Gen

// SitesSourcecontrolsWebGenerator returns a generator of SitesSourcecontrolsWeb instances for property testing.
func SitesSourcecontrolsWebGenerator() gopter.Gen {
	if sitesSourcecontrolsWebGenerator != nil {
		return sitesSourcecontrolsWebGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb(generators)
	sitesSourcecontrolsWebGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWeb{}), generators)

	return sitesSourcecontrolsWebGenerator
}

// AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb(gens map[string]gopter.Gen) {
	gens["Spec"] = SitesSourcecontrolsWeb_SpecGenerator()
	gens["Status"] = SitesSourcecontrolsWeb_STATUSGenerator()
}

func Test_SitesSourcecontrolsWebOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SitesSourcecontrolsWebOperatorSpec to SitesSourcecontrolsWebOperatorSpec via AssignProperties_To_SitesSourcecontrolsWebOperatorSpec & AssignProperties_From_SitesSourcecontrolsWebOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForSitesSourcecontrolsWebOperatorSpec, SitesSourcecontrolsWebOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSitesSourcecontrolsWebOperatorSpec tests if a specific instance of SitesSourcecontrolsWebOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSitesSourcecontrolsWebOperatorSpec(subject SitesSourcecontrolsWebOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SitesSourcecontrolsWebOperatorSpec
	err := copied.AssignProperties_To_SitesSourcecontrolsWebOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SitesSourcecontrolsWebOperatorSpec
	err = actual.AssignProperties_From_SitesSourcecontrolsWebOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SitesSourcecontrolsWebOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SitesSourcecontrolsWebOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSitesSourcecontrolsWebOperatorSpec, SitesSourcecontrolsWebOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSitesSourcecontrolsWebOperatorSpec runs a test to see if a specific instance of SitesSourcecontrolsWebOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForSitesSourcecontrolsWebOperatorSpec(subject SitesSourcecontrolsWebOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SitesSourcecontrolsWebOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SitesSourcecontrolsWebOperatorSpec instances for property testing - lazily instantiated by
// SitesSourcecontrolsWebOperatorSpecGenerator()
var sitesSourcecontrolsWebOperatorSpecGenerator gopter.Gen

// SitesSourcecontrolsWebOperatorSpecGenerator returns a generator of SitesSourcecontrolsWebOperatorSpec instances for property testing.
func SitesSourcecontrolsWebOperatorSpecGenerator() gopter.Gen {
	if sitesSourcecontrolsWebOperatorSpecGenerator != nil {
		return sitesSourcecontrolsWebOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	sitesSourcecontrolsWebOperatorSpecGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWebOperatorSpec{}), generators)

	return sitesSourcecontrolsWebOperatorSpecGenerator
}

func Test_SitesSourcecontrolsWeb_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SitesSourcecontrolsWeb_STATUS to SitesSourcecontrolsWeb_STATUS via AssignProperties_To_SitesSourcecontrolsWeb_STATUS & AssignProperties_From_SitesSourcecontrolsWeb_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSitesSourcecontrolsWeb_STATUS, SitesSourcecontrolsWeb_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSitesSourcecontrolsWeb_STATUS tests if a specific instance of SitesSourcecontrolsWeb_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSitesSourcecontrolsWeb_STATUS(subject SitesSourcecontrolsWeb_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SitesSourcecontrolsWeb_STATUS
	err := copied.AssignProperties_To_SitesSourcecontrolsWeb_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SitesSourcecontrolsWeb_STATUS
	err = actual.AssignProperties_From_SitesSourcecontrolsWeb_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SitesSourcecontrolsWeb_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SitesSourcecontrolsWeb_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSitesSourcecontrolsWeb_STATUS, SitesSourcecontrolsWeb_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSitesSourcecontrolsWeb_STATUS runs a test to see if a specific instance of SitesSourcecontrolsWeb_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSitesSourcecontrolsWeb_STATUS(subject SitesSourcecontrolsWeb_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SitesSourcecontrolsWeb_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SitesSourcecontrolsWeb_STATUS instances for property testing - lazily instantiated by
// SitesSourcecontrolsWeb_STATUSGenerator()
var sitesSourcecontrolsWeb_STATUSGenerator gopter.Gen

// SitesSourcecontrolsWeb_STATUSGenerator returns a generator of SitesSourcecontrolsWeb_STATUS instances for property testing.
// We first initialize sitesSourcecontrolsWeb_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SitesSourcecontrolsWeb_STATUSGenerator() gopter.Gen {
	if sitesSourcecontrolsWeb_STATUSGenerator != nil {
		return sitesSourcecontrolsWeb_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS(generators)
	sitesSourcecontrolsWeb_STATUSGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWeb_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS(generators)
	AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS(generators)
	sitesSourcecontrolsWeb_STATUSGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWeb_STATUS{}), generators)

	return sitesSourcecontrolsWeb_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS(gens map[string]gopter.Gen) {
	gens["Branch"] = gen.PtrOf(gen.AlphaString())
	gens["DeploymentRollbackEnabled"] = gen.PtrOf(gen.Bool())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsGitHubAction"] = gen.PtrOf(gen.Bool())
	gens["IsManualIntegration"] = gen.PtrOf(gen.Bool())
	gens["IsMercurial"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RepoUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_STATUS(gens map[string]gopter.Gen) {
	gens["GitHubActionConfiguration"] = gen.PtrOf(GitHubActionConfiguration_STATUSGenerator())
}

func Test_SitesSourcecontrolsWeb_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SitesSourcecontrolsWeb_Spec to SitesSourcecontrolsWeb_Spec via AssignProperties_To_SitesSourcecontrolsWeb_Spec & AssignProperties_From_SitesSourcecontrolsWeb_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForSitesSourcecontrolsWeb_Spec, SitesSourcecontrolsWeb_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSitesSourcecontrolsWeb_Spec tests if a specific instance of SitesSourcecontrolsWeb_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSitesSourcecontrolsWeb_Spec(subject SitesSourcecontrolsWeb_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SitesSourcecontrolsWeb_Spec
	err := copied.AssignProperties_To_SitesSourcecontrolsWeb_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SitesSourcecontrolsWeb_Spec
	err = actual.AssignProperties_From_SitesSourcecontrolsWeb_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SitesSourcecontrolsWeb_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SitesSourcecontrolsWeb_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSitesSourcecontrolsWeb_Spec, SitesSourcecontrolsWeb_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSitesSourcecontrolsWeb_Spec runs a test to see if a specific instance of SitesSourcecontrolsWeb_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForSitesSourcecontrolsWeb_Spec(subject SitesSourcecontrolsWeb_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SitesSourcecontrolsWeb_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SitesSourcecontrolsWeb_Spec instances for property testing - lazily instantiated by
// SitesSourcecontrolsWeb_SpecGenerator()
var sitesSourcecontrolsWeb_SpecGenerator gopter.Gen

// SitesSourcecontrolsWeb_SpecGenerator returns a generator of SitesSourcecontrolsWeb_Spec instances for property testing.
// We first initialize sitesSourcecontrolsWeb_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SitesSourcecontrolsWeb_SpecGenerator() gopter.Gen {
	if sitesSourcecontrolsWeb_SpecGenerator != nil {
		return sitesSourcecontrolsWeb_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_Spec(generators)
	sitesSourcecontrolsWeb_SpecGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWeb_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_Spec(generators)
	AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_Spec(generators)
	sitesSourcecontrolsWeb_SpecGenerator = gen.Struct(reflect.TypeOf(SitesSourcecontrolsWeb_Spec{}), generators)

	return sitesSourcecontrolsWeb_SpecGenerator
}

// AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSitesSourcecontrolsWeb_Spec(gens map[string]gopter.Gen) {
	gens["Branch"] = gen.PtrOf(gen.AlphaString())
	gens["DeploymentRollbackEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsGitHubAction"] = gen.PtrOf(gen.Bool())
	gens["IsManualIntegration"] = gen.PtrOf(gen.Bool())
	gens["IsMercurial"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["RepoUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSitesSourcecontrolsWeb_Spec(gens map[string]gopter.Gen) {
	gens["GitHubActionConfiguration"] = gen.PtrOf(GitHubActionConfigurationGenerator())
	gens["OperatorSpec"] = gen.PtrOf(SitesSourcecontrolsWebOperatorSpecGenerator())
}
